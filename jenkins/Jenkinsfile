pipeline {
      agent any
 
      environment {
        VENV_PATH = 'venv'
        FLASK_APP = '../webapp/app.py'
        PATH = "$VENV_PATH/bin:$PATH"
      }
 
      stages {
        stage('Checkout SCM') {
            steps {
                dir('workspace') {
                    git branch: 'master', url: ' https://github.com/kyusan93/ict2216_prac.git'
                }
            }
        }

        stage('OWASP DependencyCheck') {
            steps {
                withCredentials([string(credentialsId: 'Cred-NVD_API_Key', variable: 'NVD_API_KEY')]) {
                    dependencyCheck additionalArguments: "-o './' -s './' -f 'ALL' --prettyPrint --nvdApiKey ${env.NVD_API_KEY}", odcInstallation: 'OWASP Dependency-Check Vulnerabilities'
                    dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                }
            }
            post {
                always {
                    dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                }
            }
        }
 
        stage('Code Quality Check via SonarQube') {
          steps {
            script {
              def scannerHome = tool 'SonarQube';
                withSonarQubeEnv('SonarQube') {
                sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=prac -Dsonar.sources=. -Dsonar.exclusions='tests/**,venv/**,dependency-check-*,**/Dockerfile,test-reports/**,reports/**'"
              }
            }
          }
        }
 
        stage('Unit Testing') {
            steps {
                sh 'python3 -m venv $VENV_PATH'
                sh '. $VENV_PATH/bin/activate && pip install -r webapp/requirements.txt'
                sh '. $VENV_PATH/bin/activate && pytest --junit-xml=reports/unit-test/results.xml tests/app_unit_test.py'
            }
            post {
                always {
                    junit 'reports/unit-test/*.xml'
                    archiveArtifacts artifacts: 'reports/unit-test/results.xml', allowEmptyArchive: true
                }
            }
        }

        stage('Integration UI Test') {
            parallel {
                stage('Deploy') {
                    agent any
                    steps {
                            sh 'docker-compose -f webapp/docker-compose.yml up -d'
                            input message: 'Finished using the web site? (Click "Proceed" to continue)'
                            sh 'docker-compose -f webapp/docker-compose.yml down'
                            sh 'docker system prune -af'
                    }
                }

                stage('UI Testing') {
                    agent any
                    steps {
                            sh 'sleep 5;/var/jenkins_home/apache-maven/bin/mvn --batch-mode -V -U -e clean verify -Dsurefire.useFile=false -Dmaven.test.failure.ignore package -f tests/pom.xml'
                            sh '/var/jenkins_home/apache-maven/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs -f tests/pom.xml'
                    }
                    post {
                        always {
                            junit 'tests/target/surefire-reports/*.xml'
                            recordIssues enabledForFailure: true, tools: [mavenConsole(), java(), javaDoc()] 
                            recordIssues enabledForFailure: true, tool: checkStyle()
                            recordIssues enabledForFailure: true, tool: spotBugs(pattern: 'tests/target/findbugsXml.xml')
                            recordIssues enabledForFailure: true, tool: cpd(pattern: 'tests/target/cpd.xml')
                            recordIssues enabledForFailure: true, tool: pmdParser(pattern: 'tests/target/pmd.xml')
                        }
                    }
                }
            }
        }
    } 
} 
